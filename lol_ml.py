# -*- coding: utf-8 -*-
"""LoL ML.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1QWQeL-mXDAGGMUxh1zgmBJ0GwHOKl59T
"""

# !pip install -q sklearn

# Commented out IPython magic to ensure Python compatibility.
# %tensorflow_version 2.x

from __future__ import absolute_import, division, print_function, unicode_literals

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from IPython.display import clear_output
from six.moves import urllib

import tensorflow.compat.v2.feature_column as fc

import tensorflow as tf

dfTrain = pd.read_csv('train.csv')
dfEval = pd.read_csv('eval.csv')

# Separate data used to classify from result we're looking for (survived or not)
yTrain = dfTrain.pop('win')
yEval = dfEval.pop('win')

CATEGORICAL_COLUMNS = ['item0', 'item1', 'item2', 'item3', 'item4', 'item5', 'item6', 'perk0',	'perk0Var1',	'perk0Var2',	'perk0Var3',	'perk1',	'perk1Var1',	'perk1Var2',	'perk1Var3',	'perk2',	'perk2Var1',	'perk2Var2',	'perk2Var3',	'perk3',	'perk3Var1',	'perk3Var2',	'perk3Var3',	'perk4',	'perk4Var1',	'perk4Var2',	'perk4Var3',	'perk5',	'perk5Var1',	'perk5Var2',	'perk5Var3',	'perkPrimaryStyle',	'perkSubStyle',	'statPerk0',	'statPerk1',	'statPerk2']

# Create blank list
featureColumns = []

for featureName in CATEGORICAL_COLUMNS:
  vocabulary = dfTrain[featureName].unique() # Get unique values from given feature column as list
  featureColumns.append(tf.feature_column.categorical_column_with_vocabulary_list(featureName, vocabulary))

# Input functions

def makeInputFn(dataDf, labelDf, numEpochs = 10, shuffle = True, batchSize = 32):
  def inputFunction() : #Inner function that is returned
    ds = tf.data.Dataset.from_tensor_slices((dict(dataDf), labelDf)) #Create tf.data.Dataset object that tensorflow needs
    if shuffle:
      ds = ds.shuffle(1000) # Shuffles order of data
    ds = ds.batch(batchSize).repeat(numEpochs) # Split dataset into batches and repeat by number of epochs we want
    return ds # Returns one batch of the ataset
  return inputFunction # Returns a function object to be used

trainInputFn = makeInputFn(dfTrain, yTrain)
evalInputFn = makeInputFn(dfEval, yEval, numEpochs=1, shuffle=False)

linearEst = tf.estimator.LinearClassifier(feature_columns=featureColumns)

# Building the model

linearEst.train(trainInputFn) # Trains

result = linearEst.evaluate(evalInputFn) # Get model metrics by testing on test data

clear_output()
print(result['accuracy'])
print(result)

# Predictions

result = list(linearEst.predict(evalInputFn))

print(dfEval.loc[20])
print(result[20]['probabilities'][1])